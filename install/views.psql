CREATE OR REPLACE VIEW grimoire.tg_conn
AS SELECT import_source.import_name,
    concat('user=', host_pwd.db_role, ' password=', host_pwd.db_pwd, ' host=', import_source.target_host, ' dbname=', import_source.target_database) AS tg_conn
FROM grimoire.import_source
JOIN grimoire.host_pwd USING (import_name);

CREATE OR REPLACE VIEW grimoire.runner_prepare_schemas
AS SELECT table_definitions.import_name,
    string_agg(DISTINCT concat('CREATE SCHEMA IF NOT EXISTS ', split_part(table_definitions.target_table::text, '.'::text, 1), ';'), '
'::text) AS sql_code
   FROM grimoire.table_definitions
  WHERE table_definitions.target_table::text ~~ '%.%'::text
  GROUP BY table_definitions.import_name;

-- our dynamic code generator
CREATE OR REPLACE VIEW grimoire.code_gen
AS SELECT dd.import_name,
    tb.task_id,
    concat('DROP TABLE IF EXISTS ', dd.target_table, '_', tb.task_id, '_old cascade;
', 'ALTER TABLE IF EXISTS ', dd.target_table, '_', tb.task_id, ' RENAME TO ', split_part(dd.target_table::text, '.'::text, 2), '_', tb.task_id, '_old;
', 'CREATE TABLE ', dd.target_table, '_', tb.task_id, ' AS 
SELECT ', string_agg(concat('nullif(trim(',
        CASE
            WHEN imps.import_type::text = 'ascii'::text THEN concat('substring(tuples, ', dd.split_key_start, ', ', dd.split_key_end - dd.split_key_start + 1, ')')
            WHEN imps.import_type::text = 'csv'::text THEN concat('"', dd.source_column::text, '"')
            ELSE NULL::text
        END, '),'''')::varchar ', dd.target_column), '
  ,'::text ORDER BY dd.column_order, dd.target_column), '
from raw_import.', dd.import_name, '_', tb.task_id,
        CASE
            WHEN char_length(btrim(td.table_key_column::text)) > 0 THEN ROW('
where ',
            CASE
                WHEN imps.import_type::text = 'ascii'::text THEN concat('substring(tuples, ', td.table_key_start, ', ', td.table_key_end - td.table_key_start + 1, ')')
                WHEN imps.import_type::text = 'csv'::text THEN concat('"', td.table_key_column::text, '"')
                ELSE NULL::text
            END, '=''', td.table_key, '''')
            ELSE NULL::record
        END, ';
') AS imptask_table,
        CASE
            WHEN count(NULLIF(btrim(dd.regexp_check::text), ''::text)) > 0 THEN concat('DROP VIEW IF EXISTS ', dd.target_table, '_', tb.task_id, '_rgx cascade;
', 'CREATE VIEW ', dd.target_table, '_', tb.task_id, '_rgx AS 
SELECT distinct ', string_agg(concat('case when (', dd.target_column, ' !~ ''', dd.regexp_check, ''') THEN ', dd.target_column, ' END ', dd.target_column), '
, '::text ORDER BY dd.column_order, dd.target_column) FILTER (WHERE char_length(btrim(dd.regexp_check::text)) > 0), '
from ', dd.target_table, '_', tb.task_id, ';
')
            ELSE NULL::text
        END AS rgx_reports,
        CASE
            WHEN count(NULLIF(btrim(dd.lookup_column::text), ''::text)) > 0 THEN concat('insert into raw_import.', dd.import_name, '_runner_', tb.task_id, '
(runner_type, runner_target, runner_code)
values (''check_fk'', ''', dd.target_table, '''
, ''DROP VIEW IF EXISTS ', dd.target_table, '_fk cascade;
', 'CREATE VIEW ', dd.target_table, '_fk AS 
SELECT distinct ', string_agg(concat('case when ', dd.target_column, ' in 
    (select ', dd.lookup_column, ' from ', dd.lookup_table, ' where ', dd.lookup_filter, ')
    then NULL else ', dd.lookup_column, ' end::', dd.target_type, ' ', dd.target_column), '
, '::text) FILTER (WHERE char_length(btrim(dd.lookup_table::text)) > 2 AND char_length(btrim(dd.lookup_column::text)) > 0), '
 from ', dd.target_table, '_', tb.task_id, ';'');
')
            ELSE NULL::text
        END AS fk_reports,
    concat('insert into raw_import.', dd.import_name, '_runner_', tb.task_id, '
(runner_type, runner_target, runner_code)
values (''recreate_table'', ''', dd.target_table, '''
, ''DROP TABLE IF EXISTS ', dd.target_table, '_old cascade;
', 'ALTER TABLE IF EXISTS ', dd.target_table, ' RENAME TO ', split_part(dd.target_table::text, '.'::text, 2), '_old;
', 'CREATE TABLE ', dd.target_table, ' AS 
select ', string_agg(concat(dd.target_column, '::', dd.target_type), '
  ,'::text ORDER BY dd.column_order, dd.target_column), '
from ', dd.target_table, '_', tb.task_id, ';'');
') AS table_recreator,
    concat('insert into raw_import.', dd.import_name, '_runner_', tb.task_id, '
(runner_type, runner_target, runner_code)
values (''fill_table'', ''', dd.target_table, ''', ''INSERT INTO ', dd.target_table, '(', string_agg(dd.target_column::text, ','::text ORDER BY dd.column_order, (dd.target_column::text)), ') 
select ', string_agg(concat(dd.target_column, '::', dd.target_type), '
  ,'::text ORDER BY dd.column_order, dd.target_column), '
from ', dd.target_table, '_', tb.task_id, ';'');
') AS table_filler,
    concat(
        CASE
            WHEN count(NULLIF(btrim(dd.lookup_column::text), ''::text)) > 0 THEN concat('insert into raw_import.', dd.import_name, '_runner_', tb.task_id, '
(runner_type, runner_target, runner_code)
values (''set_fk'', ''', dd.target_table, '''
, ''', string_agg(concat('ALTER TABLE ', dd.target_table, '
      ADD CONSTRAINT ', dd.target_table, '_', dd.lookup_table, '_', dd.lookup_column, '_fk
      FOREIGN KEY (', dd.target_column, ') REFERENCES ', dd.lookup_table, '(', dd.lookup_column, ')'), ';'::text) FILTER (WHERE char_length(btrim(dd.lookup_table::text)) > 2 AND char_length(btrim(dd.lookup_column::text)) > 0), '
;'');
')
            ELSE NULL::text
        END) AS fk_setter,
    concat('DROP PROCEDURE IF EXISTS raw_import.run_', dd.import_name, '_', tb.task_id, '(varchar);
CREATE OR REPLACE PROCEDURE raw_import.run_', dd.import_name, '_', tb.task_id, '(varchar)
LANGUAGE plpgsql
as $$ BEGIN
EXECUTE (SELECT string_agg(runner_code, ''
'') from raw_import.', dd.import_name, '_runner_', tb.task_id, ' where runner_type=$1);
END $$
;

DROP PROCEDURE IF EXISTS raw_import.run_', dd.import_name, '_', tb.task_id, '(varchar, varchar);
CREATE OR REPLACE PROCEDURE raw_import.run_', dd.import_name, '_', tb.task_id, '(varchar, varchar)
LANGUAGE plpgsql
as $$ BEGIN
EXECUTE (SELECT string_agg(runner_code, ''
'') from raw_import.', dd.import_name, '_runner_', tb.task_id, ' where runner_type=$1 and runner_target=$2);
END $$
;') AS runners
   FROM grimoire.data_definitions dd
     JOIN grimoire.table_definitions td USING (import_name, target_table)
     JOIN grimoire.task_board tb USING (import_name)
     JOIN grimoire.import_source imps USING (import_name)
  WHERE NOT (tb.status::text = 'completed'::text OR tb.status::text ~~ 'error%'::text) OR tb.status IS NULL
  GROUP BY dd.import_name, dd.target_table, td.table_key_start, td.table_key_end, td.table_key_column, td.table_key, imps.import_type, tb.task_id;

